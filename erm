-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local SoundService = game:GetService("SoundService")

-- Configuration
local teleportDistance = 5
local targetUserName = "JESSETC92BACKUP1"
local freezingPlayer = "JESSETC92BACKUP1"
local blackHoleSoundId = 18841891575
local chatCommand = ":chat all"
local kickCommand = ":kick all"

-- Whitelisted players
local whitelist = {
    ["JESSETC92BACKUP1"] = true,
    ["hahshsin"] = true,
    ["76rgoyf"] = true,
    ["ggerrtasalt"] = true,
    ["Lokick07"] = true,
    ["SaviorLiberty"] = true,
    ["lpina25"] = true
}

-- Store black hole effects and pulling status
local blackHoles = {}
local isPulling = {}
local sounds = {}
local previousBlackHolePositions = {} -- To keep track of black hole positions

-- Function to create a rainbow tween for the black hole
local function createRainbowTween(blackHole)
    local rainbowColors = {
        Color3.fromRGB(255, 0, 0),   -- Red
        Color3.fromRGB(255, 165, 0), -- Orange
        Color3.fromRGB(255, 255, 0), -- Yellow
        Color3.fromRGB(0, 255, 0),   -- Green
        Color3.fromRGB(0, 0, 255),   -- Blue
        Color3.fromRGB(75, 0, 130),  -- Indigo
        Color3.fromRGB(238, 130, 238) -- Violet
    }
    
    local colorIndex = 1

    local function tweenColor()
        local nextColor = rainbowColors[colorIndex]
        colorIndex = (colorIndex % #rainbowColors) + 1 -- Cycle through the rainbow colors

        local tween = TweenService:Create(
            blackHole,
            TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), -- Tween time and style
            {Color = nextColor}
        )
        tween:Play()
        tween.Completed:Connect(function()
            tweenColor() -- Repeat for continuous color change
        end)
    end

    tweenColor()
end

-- Function to create a black hole
local function createBlackHole(targetPlayer)
    local character = targetPlayer.Character
    if not character or blackHoles[targetPlayer.Name] then return end
    
    local blackHole = Instance.new("Part")
    blackHole.Size = Vector3.new(150, 150, 150)
    blackHole.Shape = Enum.PartType.Ball
    blackHole.Material = Enum.Material.Neon
    blackHole.Color = Color3.fromRGB(0, 0, 0) -- Start with black color
    blackHole.Anchored = true
    blackHole.CanCollide = false
    blackHole.Parent = workspace
    blackHole.Position = character.HumanoidRootPart.Position

    -- Create an aura effect
    local aura = Instance.new("ParticleEmitter")
    aura.Texture = "rbxassetid://1344771186" -- Rainbow particle texture
    aura.Lifetime = NumberRange.new(1, 1)
    aura.Rate = 100
    aura.Size = NumberSequence.new(1)
    aura.Speed = NumberRange.new(5, 10)
    aura.Parent = blackHole

    blackHoles[targetPlayer.Name] = blackHole
    isPulling[targetPlayer.Name] = true -- Set pulling status to true
    previousBlackHolePositions[targetPlayer.Name] = blackHole.Position -- Track position of the black hole

    -- Play sound globally from SoundService
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. blackHoleSoundId
    sound.Looped = true
    sound.Parent = SoundService -- Set the parent to SoundService to make it play globally
    sound:Play()

    -- Start the rainbow color tween
    createRainbowTween(blackHole)

    -- Pulling players into the black hole
    RunService.Heartbeat:Connect(function()
        if isPulling[targetPlayer.Name] then
            for _, p in pairs(Players:GetPlayers()) do
                if not whitelist[p.Name] then
                    if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (p.Character.HumanoidRootPart.Position - blackHole.Position).magnitude
                        if distance < 100 then -- Pull players from any radius
                            local force = Instance.new("BodyPosition")
                            force.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                            force.Position = blackHole.Position
                            force.Parent = p.Character.HumanoidRootPart
                            task.wait(0.5)
                            force:Destroy()
                        end
                    end
                end
            end
        end
    end)

    -- Automatically kill players when they're close to the black hole
    RunService.Stepped:Connect(function()
        for _, p in pairs(Players:GetPlayers()) do
            if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (p.Character.HumanoidRootPart.Position - blackHole.Position).magnitude
                if distance < 10 and p.Name ~= targetUserName then
                    p.Character:BreakJoints() -- Instantly kills the player
                end
            end
        end
    end)
end

-- Function to remove a black hole
local function removeBlackHole(targetPlayer)
    if blackHoles[targetPlayer.Name] then
        local blackHole = blackHoles[targetPlayer.Name]
        blackHole:Destroy()
        blackHoles[targetPlayer.Name] = nil
        isPulling[targetPlayer.Name] = false -- Set pulling status to false

        -- Stop the sound
        for _, sound in pairs(SoundService:GetChildren()) do
            if sound:IsA("Sound") and sound.SoundId == "rbxassetid://" .. blackHoleSoundId then
                sound:Stop() -- Stop the sound when the black hole is removed
                sound:Destroy() -- Optionally destroy the sound object
            end
        end
        
        -- Set a cooldown for the previous black hole position
        local previousPosition = previousBlackHolePositions[targetPlayer.Name]
        previousBlackHolePositions[targetPlayer.Name] = nil
        
        -- Start a cooldown period where players cannot be killed near the previous black hole position
        task.delay(5, function() -- Cooldown duration
            previousBlackHolePositions[targetPlayer.Name] = previousPosition -- Restore the previous position after cooldown
        end)
    end
end

-- Function to teleport the player
local function teleportPlayer(playerToTeleport, targetPlayer)
    if whitelist[playerToTeleport.Name] or playerToTeleport.Name == targetUserName then return end -- Skip teleport for whitelisted users and the specified user
    local character = targetPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local hrp = character.HumanoidRootPart
        local teleportPosition = hrp.Position + hrp.CFrame.LookVector * teleportDistance
        playerToTeleport.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    end
end

-- Function to freeze the player
local function freezePlayer(player)
    if whitelist[player.Name] or player.Name == freezingPlayer then return end -- Skip freezing for whitelisted users and the specified user
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.Anchored = true
        end
    end
end

-- Function to unfreeze the player
local function unfreezePlayer(player)
    if whitelist[player.Name] or player.Name == freezingPlayer then return end -- Skip unfreezing for whitelisted users and the specified user
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.Anchored = false
        end
    end
end

-- Function to kick all players who executed the script
local function kickAllPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if not whitelist[player.Name] then
            player:Kick("You have been kicked by a whitelisted player.")
        end
    end
end

-- Function to handle chat commands
local function onChatted(player, message)
    if whitelist[player.Name] or player.Name == targetUserName then
        if message:match("^:bring all") then
            for _, p in pairs(Players:GetPlayers()) do
                teleportPlayer(p, player)
            end
        elseif message == ":freeze all" then
            for _, p in pairs(Players:GetPlayers()) do
                freezePlayer(p)
            end
        elseif message == ":unfreeze all" then
            for _, p in pairs(Players:GetPlayers()) do
                unfreezePlayer(p)
            end
        elseif message:sub(1, chatCommand:len()) == chatCommand then
            local command = message:sub(chatCommand:len() + 2) -- Get the command after ":chat all "
            if command == "blackhole all" then
                createBlackHole(player)
            elseif command == "unblackhole all" then
                removeBlackHole(player)
            end
        elseif message == kickCommand then
            kickAllPlayers()
        end
    end
end

-- Connect the chat event for new players
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onChatted(player, message)
    end)
end)

-- Connect the chat event for existing players
for _, player in pairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onChatted(player, message)
    end
end
