-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Configuration
local teleportDistance = 5
local targetUserName = "JESSETC92BACKUP1"
local freezingPlayer = "JESSETC92BACKUP1"
local chatCommand = ":chat all"

-- Whitelisted players
local whitelist = {
    ["JESSETC92BACKUP1"] = true,
    ["hahshsin"] = true,
    ["76rgoyf"] = true,
    ["hdfghjbgg"] = true,
    ["Lokick07"] = true,
    ["JESSETC92BACKUP"] = true,
    ["Xx_sabrina726"] = true,
    ["ggerrtasalt"] = true -- Added ggerrtasalt to the whitelist
}

-- Controlled player and original camera settings
local controlledPlayer = nil
local originalCameraSubject = nil
local originalCameraType = nil
local originalFOV = nil

-- Function to teleport the player
local function teleportPlayer(playerToTeleport, targetPlayer)
    if whitelist[playerToTeleport.Name] or playerToTeleport.Name == targetUserName then return end -- Skip teleport for whitelisted users and the specified user
    local character = targetPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local hrp = character.HumanoidRootPart
        local teleportPosition = hrp.Position + hrp.CFrame.LookVector * teleportDistance
        playerToTeleport.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    end
end

-- Function to freeze the player
local function freezePlayer(player)
    if whitelist[player.Name] or player.Name == freezingPlayer then return end -- Skip freezing for whitelisted users and the specified user
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.Anchored = true
        end
    end
end

-- Function to unfreeze the player
local function unfreezePlayer(player)
    if whitelist[player.Name] or player.Name == freezingPlayer then return end -- Skip unfreezing for whitelisted users and the specified user
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.Anchored = false
        end
    end
end

-- Function to kick the player
local function kickPlayer(player)
    if whitelist[player.Name] then return end -- Skip kicking for whitelisted users
    player:Kick("You have been kicked from the game.")
end

-- Function to fling the player
local function flingPlayer(player)
    if whitelist[player.Name] then return end -- Skip flinging for whitelisted users
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local hrp = character.HumanoidRootPart
        hrp.Velocity = Vector3.new(math.random(-1000, 1000), math.random(500, 1000), math.random(-1000, 1000))
    end
end

-- Function to mute the player
local mutedPlayers = {}

local function mutePlayer(player)
    if whitelist[player.Name] then return end -- Skip muting for whitelisted users
    mutedPlayers[player.Name] = true
end

-- Function to unmute the player
local function unmutePlayer(player)
    if whitelist[player.Name] then return end -- Skip unmuting for whitelisted users
    mutedPlayers[player.Name] = nil
end

-- Function to explode the player
local function explodePlayer(player)
    if whitelist[player.Name] then return end -- Skip exploding for whitelisted users
    local character = player.Character
    if character then
        local explosion = Instance.new("Explosion")
        explosion.Position = character.HumanoidRootPart.Position
        explosion.BlastRadius = 10
        explosion.BlastPressure = 500000
        explosion.Parent = character
    end
end

-- Function to make the player dizzy (blind)
local dizzyPlayers = {}

local function dizzyPlayer(player)
    if whitelist[player.Name] then return end -- Skip dizzying for whitelisted users
    dizzyPlayers[player.Name] = true
    player.CameraMode = Enum.CameraMode.LockFirstPerson
    player.PlayerGui:ClearAllChildren()
end

-- Function to undizzy the player
local function undizzyPlayer(player)
    if whitelist[player.Name] then return end -- Skip undizzying for whitelisted users
    dizzyPlayers[player.Name] = nil
    player.CameraMode = Enum.CameraMode.Classic
end

-- Function to make the player confused (random walking)
local confusedPlayers = {}

local function confusePlayer(player)
    if whitelist[player.Name] then return end -- Skip confusing for whitelisted users
    confusedPlayers[player.Name] = true
    while confusedPlayers[player.Name] do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid:Move(Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)), true)
        end
        wait(0.5)
    end
end

-- Function to unconfuse the player
local function unconfusePlayer(player)
    if whitelist[player.Name] then return end -- Skip unconfusing for whitelisted users
    confusedPlayers[player.Name] = nil
end

-- Function to control the player
local function controlPlayer(playerToControl, controllingPlayer)
    if whitelist[playerToControl.Name] or whitelist[controllingPlayer.Name] then return end -- Skip control for whitelisted users

    controlledPlayer = playerToControl
    local player = Players.LocalPlayer

    if player and player.Character and controlledPlayer and controlledPlayer.Character then
        originalCameraSubject = player.CameraSubject
        originalCameraType = player.CameraType
        originalFOV = player.CameraMaxZoomDistance

        local controlledHumanoid = controlledPlayer.Character:FindFirstChildOfClass("Humanoid")

        if controlledHumanoid then
            player.CameraSubject = controlledHumanoid
            player.CameraType = Enum.CameraType.Custom
            player.CameraMaxZoomDistance = controlledHumanoid.CameraOffset.Y + 100 -- Adjust FOV for dramatic effect

            RunService.RenderStepped:Connect(function()
                if controlledPlayer and controlledPlayer.Character then
                    player.Character.HumanoidRootPart.CFrame = controlledPlayer.Character.HumanoidRootPart.CFrame
                    player.Character.Humanoid:Move(controlledPlayer.Character.Humanoid.MoveDirection, false)
                end
            end)
        end
    end
end

-- Function to uncontrol the player
local function uncontrolPlayer()
    local player = Players.LocalPlayer

    if player and originalCameraSubject then
        player.CameraSubject = originalCameraSubject
        player.CameraType = originalCameraType
        player.CameraMaxZoomDistance = originalFOV
    end

    controlledPlayer = nil
end

-- Function to handle chat commands
local function onChatted(player, message)
    if whitelist[player.Name] then -- Allow whitelisted players to use all commands
        local command = message:lower()

        if command == ":bring all" then
            local localPlayer = Players.LocalPlayer
            if localPlayer and localPlayer.Character then
                teleportPlayer(localPlayer, player)
            end
        elseif command == ":freeze all" then
            freezePlayer(Players.LocalPlayer)
        elseif command == ":unfreeze all" then
            unfreezePlayer(Players.LocalPlayer)
        elseif command == ":kick" then
            kickPlayer(player)
        elseif command == ":fling" then
            flingPlayer(player)
        elseif command == ":mute" then
            mutePlayer(player)
        elseif command == ":unmute" then
            unmutePlayer(player)
        elseif command == ":explode" then
            explodePlayer(player)
        elseif command == ":dizzy" then
            dizzyPlayer(player)
        elseif command == ":undizzy" then
            undizzyPlayer(player)
        elseif command == ":confuse" then
            confusePlayer(player)
        elseif command == ":unconfuse" then
            unconfusePlayer(player)
        elseif command == ":control" then
            controlPlayer(player, Players.LocalPlayer)
        elseif command == ":uncontrol" then
            uncontrolPlayer()
        elseif command:sub(1, chatCommand:len()) == chatCommand then
            local chatMessage = message:sub(chatCommand:len() + 2) -- Extract the message after the command
            if chatMessage and chatMessage ~= "" then
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(chatMessage, "All")
            end
        end
    end
end

-- Connect the chat event for players who join
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onChatted(player, message)
    end)
end)

-- Connect the chat event for existing players
for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onChatted(player, message)
    end)
end

-- Prevent muted players from chatting
local function onPlayerChatted(player, message)
    if mutedPlayers[player.Name] then
        return
    end

    onChatted(player, message)
end

-- Override chat functionality
Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(onPlayerChatted)
end)
