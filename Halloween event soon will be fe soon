local RunService = game:GetService("RunService") 
local Lighting = game:GetService("Lighting")
local Players = game:GetService("Players")

-- Store original lighting settings
local originalLighting = {
    Ambient = Lighting.Ambient,
    OutdoorAmbient = Lighting.OutdoorAmbient,
    Brightness = Lighting.Brightness,
    FogColor = Lighting.FogColor,
    FogStart = Lighting.FogStart,
    FogEnd = Lighting.FogEnd,
}

-- Function to reset the lighting to original settings
local function resetLighting()
    -- Restore original lighting effects
    Lighting.Ambient = originalLighting.Ambient
    Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient
    Lighting.Brightness = originalLighting.Brightness
    Lighting.FogColor = originalLighting.FogColor
    Lighting.FogStart = originalLighting.FogStart
    Lighting.FogEnd = originalLighting.FogEnd

    -- Optionally, you can remove only specific Sky instances if needed.
    for _, child in pairs(Lighting:GetChildren()) do
        if child:IsA("Sky") then
            child:Destroy()
        end
    end
end

-- Function to create colorful firework effects
local function createFireworks()
    local fireworkList = {}

    for i = 1, 60 do
        local firework = Instance.new("Part")
        firework.Size = Vector3.new(1, 1, 1)
        firework.Position = Vector3.new(math.random(-100, 100), math.random(40, 100), math.random(-100, 100))
        firework.Anchored = true
        firework.CanCollide = false
        firework.Transparency = 1 -- Make the firework invisible
        firework.Name = "Firework"
        firework.Parent = workspace

        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Color = ColorSequence.new(Color3.new(1, 0, 0), Color3.new(1, 1, 0), Color3.new(0, 1, 0), Color3.new(0, 1, 1), Color3.new(0, 0, 1), Color3.new(1, 0, 1))
        particleEmitter.Lifetime = NumberRange.new(1, 2)
        particleEmitter.Rate = 150
        particleEmitter.Speed = NumberRange.new(50, 100)
        particleEmitter.Size = NumberSequence.new(2, 5)
        particleEmitter.Parent = firework

        coroutine.wrap(function()
            while firework do
                local hue = tick() % 5 / 5
                local color = Color3.fromHSV(hue, 1, 1)
                particleEmitter.Color = ColorSequence.new(color, Color3.new(math.random(), math.random(), math.random()))
                wait(0.1)
            end
        end)()

        table.insert(fireworkList, firework)
    end

    -- Sync fireworks with the song
    RunService.Heartbeat:Connect(function()
        for _, firework in ipairs(fireworkList) do
            local bobbingHeight = math.sin(tick() * 2) * 5
            firework.Position = firework.Position + Vector3.new(0, bobbingHeight, 0)
        end
    end)

    return fireworkList
end

-- Function to create a swirling particle effect
local function createSwirlingParticles()
    local swirlParts = {} -- Store swirl parts for cleanup

    for i = 1, 20 do
        local swirlPart = Instance.new("Part")
        swirlPart.Size = Vector3.new(1, 1, 1)
        swirlPart.Position = Vector3.new(math.random(-50, 50), math.random(40, 100), math.random(-50, 50))
        swirlPart.Anchored = true
        swirlPart.CanCollide = false
        swirlPart.Transparency = 1 -- Make the swirl part invisible
        swirlPart.Parent = workspace

        local particleEmitter = Instance.new("ParticleEmitter")
        particleEmitter.Color = ColorSequence.new(Color3.new(1, 1, 1), Color3.new(0, 1, 1))
        particleEmitter.Lifetime = NumberRange.new(1, 3)
        particleEmitter.Rate = 200
        particleEmitter.Speed = NumberRange.new(30, 60)
        particleEmitter.Size = NumberSequence.new(0.5, 2)
        particleEmitter.Parent = swirlPart

        -- Swirl animation
        coroutine.wrap(function()
            while swirlPart do
                swirlPart.Position = swirlPart.Position + Vector3.new(math.sin(tick()), 0, math.cos(tick())) * 0.5
                wait(0.05)
            end
        end)()

        table.insert(swirlParts, swirlPart) -- Add to list for cleanup
    end

    return swirlParts -- Return the list of swirl parts
end

-- Function to create a colorful laser show
local function createLaserShow()
    local laserList = {} -- Store lasers for cleanup

    for i = 1, 100 do
        local laser = Instance.new("Part")
        laser.Size = Vector3.new(0.1, 100, 0.1)
        laser.Position = Vector3.new(math.random(-100, 100), 50, math.random(-100, 100))
        laser.Anchored = true
        laser.CanCollide = false
        laser.BrickColor = BrickColor.Random()
        laser.Transparency = 1 -- Make the laser part invisible
        laser.Parent = workspace

        local tweenService = game:GetService("TweenService")
        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)
        local tween = tweenService:Create(laser, tweenInfo, {Size = Vector3.new(0.1, 0, 0.1)})
        tween:Play()

        table.insert(laserList, laser) -- Add to list for cleanup
    end

    return laserList -- Return the list of lasers
end

-- Function to create music visualizer
local function createMusicVisualizer(sound)
    local visualizerParts = {}
    
    for i = 1, 50 do
        local visualizerPart = Instance.new("Part")
        visualizerPart.Size = Vector3.new(1, 1, 1)
        visualizerPart.Position = Vector3.new(math.random(-50, 50), 40 + math.random(10), math.random(-50, 50))
        visualizerPart.Anchored = true
        visualizerPart.CanCollide = false
        visualizerPart.BrickColor = BrickColor.Random()
        visualizerPart.Parent = workspace
        visualizerPart.Material = Enum.Material.Neon
        
        -- Visualizer animation based on sound loudness
        coroutine.wrap(function()
            while visualizerPart do
                local loudness = sound.PlaybackLoudness
                visualizerPart.Size = Vector3.new(1, loudness / 100, 1) -- Adjust size based on loudness
                visualizerPart.Color = Color3.fromHSV(math.abs(math.sin(tick())), 1, 1) -- Change color
                wait(0.1)
            end
        end)()

        table.insert(visualizerParts, visualizerPart)
    end
    
    return visualizerParts
end



-- Lighting Effects for Theme
Lighting.Ambient = Color3.fromRGB(255, 140, 0)
Lighting.OutdoorAmbient = Color3.fromRGB(10, 10, 10)
Lighting.Brightness = 2
Lighting.FogColor = Color3.fromRGB(255, 100, 0)
Lighting.FogStart = 200
Lighting.FogEnd = 800
local sky = Instance.new("Sky")
sky.SkyboxBk = "rbxassetid://159454299"
sky.SkyboxDn = "rbxassetid://159454299"
sky.SkyboxFt = "rbxassetid://159454299"
sky.SkyboxLf = "rbxassetid://159454299"
sky.SkyboxRt = "rbxassetid://159454299"
sky.SkyboxUp = "rbxassetid://159454299"
sky.Parent = Lighting

-- Function to create a spinning tornado with rainbow colors
local function createTornado(sound)
    local tornado = Instance.new("Part")
    tornado.Size = Vector3.new(5, 50, 5)
    tornado.Position = Vector3.new(0, 25, 0)
    tornado.Anchored = true
    tornado.CanCollide = false
    tornado.Material = Enum.Material.Neon
    tornado.BrickColor = BrickColor.Random()
    tornado.Parent = workspace

    -- Tornado spinning and color changing
    coroutine.wrap(function()
        while tornado do
            local loudness = sound.PlaybackLoudness
            tornado.Size = Vector3.new(5, math.clamp(loudness / 20, 5, 50), 5) -- Adjust height based on loudness
            tornado.CFrame = tornado.CFrame * CFrame.Angles(0, math.rad(5), 0) -- Spin effect
            
            -- Update color
            tornado.BrickColor = BrickColor.new(Color3.fromHSV(tick() % 5 / 5, 1, 1))

            wait(0.05)
        end
    end)()

    return tornado
end



local function makePlayerJump()
    local jumpDuration = 10 -- Jumping duration in seconds
    local startTime = tick()

    while tick() - startTime < jumpDuration do
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        wait(0.5) -- Adjust frequency of jumps
    end
end


-- Sound Setup
local audioId = "rbxassetid://16190782786"
local sound = Instance.new("Sound")
sound.SoundId = audioId
sound.Looped = false
sound.Volume = 1
sound.Parent = workspace
sound:Play()

-- Create fireworks and effects
local fireworkList = createFireworks()
local swirlParts = createSwirlingParticles()  -- Create swirling particles
local laserList = createLaserShow()          -- Create a laser show
local visualizerParts = createMusicVisualizer(sound) -- Create music visualizer
local tornado = createTornado(sound)          -- Create tornado effect
local discoParts = createDiscoLights(sound)

-- Start jumping in sync with the song
makePlayerJump()



-- Wait for the song to finish and then reset everything
sound.Ended:Wait()  -- Wait until the sound ends

-- Remove only the created effects
for _, firework in ipairs(fireworkList) do
    firework:Destroy()
end

for _, swirlPart in ipairs(swirlParts) do
    swirlPart:Destroy()
end



for _, laser in ipairs(laserList) do
    laser:Destroy()
end


for _, visualizerPart in ipairs(visualizerParts) do
    visualizerPart:Destroy()
end

   -- Remove tornado
    if tornado then
        tornado:Destroy()
    end
    


-- Reset lighting
resetLighting()
